// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ExecutionOutputDetailed Execution Output Detailed
//
// The properties that are included when fetching a single Execution.
// swagger:model execution-output-detailed
type ExecutionOutputDetailed struct {
	ExecutionOutput

	// ended at
	EndedAt string `json:"endedAt,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// logs
	Logs []string `json:"logs"`

	// params
	Params map[string]Any `json:"params,omitempty"`

	// started at
	StartedAt string `json:"startedAt,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ExecutionOutputDetailed) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ExecutionOutput
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ExecutionOutput = aO0

	// AO1
	var dataAO1 struct {
		EndedAt string `json:"endedAt,omitempty"`

		Error string `json:"error,omitempty"`

		Logs []string `json:"logs"`

		Params map[string]Any `json:"params,omitempty"`

		StartedAt string `json:"startedAt,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.EndedAt = dataAO1.EndedAt

	m.Error = dataAO1.Error

	m.Logs = dataAO1.Logs

	m.Params = dataAO1.Params

	m.StartedAt = dataAO1.StartedAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ExecutionOutputDetailed) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ExecutionOutput)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		EndedAt string `json:"endedAt,omitempty"`

		Error string `json:"error,omitempty"`

		Logs []string `json:"logs"`

		Params map[string]Any `json:"params,omitempty"`

		StartedAt string `json:"startedAt,omitempty"`
	}

	dataAO1.EndedAt = m.EndedAt

	dataAO1.Error = m.Error

	dataAO1.Logs = m.Logs

	dataAO1.Params = m.Params

	dataAO1.StartedAt = m.StartedAt

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this execution output detailed
func (m *ExecutionOutputDetailed) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ExecutionOutput
	if err := m.ExecutionOutput.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ExecutionOutputDetailed) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecutionOutputDetailed) UnmarshalBinary(b []byte) error {
	var res ExecutionOutputDetailed
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
