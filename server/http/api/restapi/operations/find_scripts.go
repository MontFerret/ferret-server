// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// FindScriptsHandlerFunc turns a function with the right signature into a find scripts handler
type FindScriptsHandlerFunc func(FindScriptsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindScriptsHandlerFunc) Handle(params FindScriptsParams) middleware.Responder {
	return fn(params)
}

// FindScriptsHandler interface for that can handle valid find scripts params
type FindScriptsHandler interface {
	Handle(FindScriptsParams) middleware.Responder
}

// NewFindScripts creates a new http.Handler for the find scripts operation
func NewFindScripts(ctx *middleware.Context, handler FindScriptsHandler) *FindScripts {
	return &FindScripts{Context: ctx, Handler: handler}
}

/*FindScripts swagger:route GET /projects/{projectID}/scripts findScripts

List Script

*/
type FindScripts struct {
	Context *middleware.Context
	Handler FindScriptsHandler
}

func (o *FindScripts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindScriptsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// FindScriptsOKBody find scripts o k body
// swagger:model FindScriptsOKBody
type FindScriptsOKBody struct {

	// paging
	// Required: true
	Paging *FindScriptsOKBodyAO0Paging `json:"paging"`

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *FindScriptsOKBody) UnmarshalJSON(raw []byte) error {
	// FindScriptsOKBodyAO0
	var dataFindScriptsOKBodyAO0 struct {
		Paging *FindScriptsOKBodyAO0Paging `json:"paging"`
	}
	if err := swag.ReadJSON(raw, &dataFindScriptsOKBodyAO0); err != nil {
		return err
	}

	o.Paging = dataFindScriptsOKBodyAO0.Paging

	// FindScriptsOKBodyAO1
	var dataFindScriptsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataFindScriptsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataFindScriptsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o FindScriptsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataFindScriptsOKBodyAO0 struct {
		Paging *FindScriptsOKBodyAO0Paging `json:"paging"`
	}

	dataFindScriptsOKBodyAO0.Paging = o.Paging

	jsonDataFindScriptsOKBodyAO0, errFindScriptsOKBodyAO0 := swag.WriteJSON(dataFindScriptsOKBodyAO0)
	if errFindScriptsOKBodyAO0 != nil {
		return nil, errFindScriptsOKBodyAO0
	}
	_parts = append(_parts, jsonDataFindScriptsOKBodyAO0)

	var dataFindScriptsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataFindScriptsOKBodyAO1.Data = o.Data

	jsonDataFindScriptsOKBodyAO1, errFindScriptsOKBodyAO1 := swag.WriteJSON(dataFindScriptsOKBodyAO1)
	if errFindScriptsOKBodyAO1 != nil {
		return nil, errFindScriptsOKBodyAO1
	}
	_parts = append(_parts, jsonDataFindScriptsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this find scripts o k body
func (o *FindScriptsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaging(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FindScriptsOKBody) validatePaging(formats strfmt.Registry) error {

	if err := validate.Required("findScriptsOK"+"."+"paging", "body", o.Paging); err != nil {
		return err
	}

	if o.Paging != nil {
		if err := o.Paging.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("findScriptsOK" + "." + "paging")
			}
			return err
		}
	}

	return nil
}

func (o *FindScriptsOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("findScriptsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *FindScriptsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FindScriptsOKBody) UnmarshalBinary(b []byte) error {
	var res FindScriptsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// FindScriptsOKBodyAO0Paging find scripts o k body a o0 paging
// swagger:model FindScriptsOKBodyAO0Paging
type FindScriptsOKBodyAO0Paging struct {

	// count
	// Required: true
	Count *float64 `json:"count"`

	// cursors
	// Required: true
	Cursors *FindScriptsOKBodyAO0PagingCursors `json:"cursors"`
}

// Validate validates this find scripts o k body a o0 paging
func (o *FindScriptsOKBodyAO0Paging) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCursors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FindScriptsOKBodyAO0Paging) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("findScriptsOK"+"."+"paging"+"."+"count", "body", o.Count); err != nil {
		return err
	}

	return nil
}

func (o *FindScriptsOKBodyAO0Paging) validateCursors(formats strfmt.Registry) error {

	if err := validate.Required("findScriptsOK"+"."+"paging"+"."+"cursors", "body", o.Cursors); err != nil {
		return err
	}

	if o.Cursors != nil {
		if err := o.Cursors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("findScriptsOK" + "." + "paging" + "." + "cursors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *FindScriptsOKBodyAO0Paging) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FindScriptsOKBodyAO0Paging) UnmarshalBinary(b []byte) error {
	var res FindScriptsOKBodyAO0Paging
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// FindScriptsOKBodyAO0PagingCursors find scripts o k body a o0 paging cursors
// swagger:model FindScriptsOKBodyAO0PagingCursors
type FindScriptsOKBodyAO0PagingCursors struct {

	// after
	After string `json:"after,omitempty"`

	// before
	Before string `json:"before,omitempty"`
}

// Validate validates this find scripts o k body a o0 paging cursors
func (o *FindScriptsOKBodyAO0PagingCursors) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FindScriptsOKBodyAO0PagingCursors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FindScriptsOKBodyAO0PagingCursors) UnmarshalBinary(b []byte) error {
	var res FindScriptsOKBodyAO0PagingCursors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
