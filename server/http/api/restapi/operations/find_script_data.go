// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "github.com/MontFerret/ferret-server/server/http/api/models"
)

// FindScriptDataHandlerFunc turns a function with the right signature into a find script data handler
type FindScriptDataHandlerFunc func(FindScriptDataParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindScriptDataHandlerFunc) Handle(params FindScriptDataParams) middleware.Responder {
	return fn(params)
}

// FindScriptDataHandler interface for that can handle valid find script data params
type FindScriptDataHandler interface {
	Handle(FindScriptDataParams) middleware.Responder
}

// NewFindScriptData creates a new http.Handler for the find script data operation
func NewFindScriptData(ctx *middleware.Context, handler FindScriptDataHandler) *FindScriptData {
	return &FindScriptData{Context: ctx, Handler: handler}
}

/*FindScriptData swagger:route GET /projects/{projectId}/data/{scriptId} findScriptData

List Script Data

*/
type FindScriptData struct {
	Context *middleware.Context
	Handler FindScriptDataHandler
}

func (o *FindScriptData) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindScriptDataParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// FindScriptDataOKBody find script data o k body
// swagger:model FindScriptDataOKBody
type FindScriptDataOKBody struct {
	models.SearchResult

	// data
	Data []*models.DataOutput `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *FindScriptDataOKBody) UnmarshalJSON(raw []byte) error {
	// FindScriptDataOKBodyAO0
	var findScriptDataOKBodyAO0 models.SearchResult
	if err := swag.ReadJSON(raw, &findScriptDataOKBodyAO0); err != nil {
		return err
	}
	o.SearchResult = findScriptDataOKBodyAO0

	// FindScriptDataOKBodyAO1
	var dataFindScriptDataOKBodyAO1 struct {
		Data []*models.DataOutput `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataFindScriptDataOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataFindScriptDataOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o FindScriptDataOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	findScriptDataOKBodyAO0, err := swag.WriteJSON(o.SearchResult)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, findScriptDataOKBodyAO0)

	var dataFindScriptDataOKBodyAO1 struct {
		Data []*models.DataOutput `json:"data"`
	}

	dataFindScriptDataOKBodyAO1.Data = o.Data

	jsonDataFindScriptDataOKBodyAO1, errFindScriptDataOKBodyAO1 := swag.WriteJSON(dataFindScriptDataOKBodyAO1)
	if errFindScriptDataOKBodyAO1 != nil {
		return nil, errFindScriptDataOKBodyAO1
	}
	_parts = append(_parts, jsonDataFindScriptDataOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this find script data o k body
func (o *FindScriptDataOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SearchResult
	if err := o.SearchResult.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FindScriptDataOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("findScriptDataOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *FindScriptDataOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FindScriptDataOKBody) UnmarshalBinary(b []byte) error {
	var res FindScriptDataOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
