// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/MontFerret/ferret-server/server/http/api/models"
)

// FindProjectsHandlerFunc turns a function with the right signature into a find projects handler
type FindProjectsHandlerFunc func(FindProjectsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindProjectsHandlerFunc) Handle(params FindProjectsParams) middleware.Responder {
	return fn(params)
}

// FindProjectsHandler interface for that can handle valid find projects params
type FindProjectsHandler interface {
	Handle(FindProjectsParams) middleware.Responder
}

// NewFindProjects creates a new http.Handler for the find projects operation
func NewFindProjects(ctx *middleware.Context, handler FindProjectsHandler) *FindProjects {
	return &FindProjects{Context: ctx, Handler: handler}
}

/*FindProjects swagger:route GET /projects findProjects

List Project

*/
type FindProjects struct {
	Context *middleware.Context
	Handler FindProjectsHandler
}

func (o *FindProjects) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindProjectsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// FindProjectsOKBody find projects o k body
// swagger:model FindProjectsOKBody
type FindProjectsOKBody struct {
	models.SearchResult

	// data
	// Required: true
	Data []*models.ProjectOutput `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *FindProjectsOKBody) UnmarshalJSON(raw []byte) error {
	// FindProjectsOKBodyAO0
	var findProjectsOKBodyAO0 models.SearchResult
	if err := swag.ReadJSON(raw, &findProjectsOKBodyAO0); err != nil {
		return err
	}
	o.SearchResult = findProjectsOKBodyAO0

	// FindProjectsOKBodyAO1
	var dataFindProjectsOKBodyAO1 struct {
		Data []*models.ProjectOutput `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataFindProjectsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataFindProjectsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o FindProjectsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	findProjectsOKBodyAO0, err := swag.WriteJSON(o.SearchResult)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, findProjectsOKBodyAO0)

	var dataFindProjectsOKBodyAO1 struct {
		Data []*models.ProjectOutput `json:"data"`
	}

	dataFindProjectsOKBodyAO1.Data = o.Data

	jsonDataFindProjectsOKBodyAO1, errFindProjectsOKBodyAO1 := swag.WriteJSON(dataFindProjectsOKBodyAO1)
	if errFindProjectsOKBodyAO1 != nil {
		return nil, errFindProjectsOKBodyAO1
	}
	_parts = append(_parts, jsonDataFindProjectsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this find projects o k body
func (o *FindProjectsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SearchResult
	if err := o.SearchResult.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FindProjectsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("findProjectsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("findProjectsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *FindProjectsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FindProjectsOKBody) UnmarshalBinary(b []byte) error {
	var res FindProjectsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
