// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFindScriptsParams creates a new FindScriptsParams object
// with the default values initialized.
func NewFindScriptsParams() FindScriptsParams {

	var (
		// initialize parameters with default values

		countDefault = int32(10)
	)

	return FindScriptsParams{
		Count: &countDefault,
	}
}

// FindScriptsParams contains all the bound params for the find scripts operation
// typically these are obtained from a http.Request
//
// swagger:parameters findScripts
type FindScriptsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Count of items to return
	  Maximum: 100
	  Minimum: 1
	  In: query
	  Default: 10
	*/
	Count *int32
	/*Pagination cursor
	  In: query
	*/
	Cursor *string
	/*
	  Required: true
	  Pattern: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
	  In: path
	*/
	ProjectID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewFindScriptsParams() beforehand.
func (o *FindScriptsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCount, qhkCount, _ := qs.GetOK("count")
	if err := o.bindCount(qCount, qhkCount, route.Formats); err != nil {
		res = append(res, err)
	}

	qCursor, qhkCursor, _ := qs.GetOK("cursor")
	if err := o.bindCursor(qCursor, qhkCursor, route.Formats); err != nil {
		res = append(res, err)
	}

	rProjectID, rhkProjectID, _ := route.Params.GetOK("projectID")
	if err := o.bindProjectID(rProjectID, rhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCount binds and validates parameter Count from query.
func (o *FindScriptsParams) bindCount(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewFindScriptsParams()
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("count", "query", "int32", raw)
	}
	o.Count = &value

	if err := o.validateCount(formats); err != nil {
		return err
	}

	return nil
}

// validateCount carries on validations for parameter Count
func (o *FindScriptsParams) validateCount(formats strfmt.Registry) error {

	if err := validate.MinimumInt("count", "query", int64(*o.Count), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("count", "query", int64(*o.Count), 100, false); err != nil {
		return err
	}

	return nil
}

// bindCursor binds and validates parameter Cursor from query.
func (o *FindScriptsParams) bindCursor(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Cursor = &raw

	return nil
}

// bindProjectID binds and validates parameter ProjectID from path.
func (o *FindScriptsParams) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ProjectID = raw

	if err := o.validateProjectID(formats); err != nil {
		return err
	}

	return nil
}

// validateProjectID carries on validations for parameter ProjectID
func (o *FindScriptsParams) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Pattern("projectID", "path", o.ProjectID, `[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}`); err != nil {
		return err
	}

	return nil
}
